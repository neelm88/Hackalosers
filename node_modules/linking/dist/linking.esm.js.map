{"version":3,"file":"linking.esm.js","sources":["../src/class-factory.ls","../src/flat-diff.ls","../src/linking.ls","../src/handle-actions.ls","../src/side-effect.ls"],"sourcesContent":["function identity => it\nfunction class-factory component => (spec) ->\n  ctor = identity ->\n  ctor:: = Object.assign (Object.create component::), spec, constructor: ctor\n  Object.assign ctor, {spec.display-name}\n\nexport default: class-factory\n","function flat-diff a, b\n  return false if a == b\n  return true if typeof a != \\object or typeof b != \\object\n  keys = Object.keys a\n  return true if keys.length != Object.keys b .length\n  keys.some -> a[it] != b[it]\n\nexport default: flat-diff\n","import\n  \\./class-factory : class-factory\n  \\./flat-diff : flat-diff\n\nempty = {}\nfunction name => it.display-name || it.name || it\nfunction pass => it\n\nfunction nested store\n  listeners = new Set\n  Object.assign {} store,\n    subscribe: ->\n      listeners.add it\n      listeners.delete.bind listeners, it\n    notify: -> Array.from listeners.keys! .map -> it!\n\n!function init instance, select, merge, render\n  store = instance.props.store || instance.context.store\n  context = store: next = if select != pass then nested store else store\n  selected = select store.get-state!, instance.props\n  changed = false\n\n  function handle-change props=instance.props\n    prev = selected\n    selected := select store.get-state!, props\n    if flat-diff prev, selected then changed := true else next.notify!\n\n  function bind-action create-action, props => (event) ->\n    action = create-action? event, props, store.get-state or create-action\n    action.then? store.dispatch or\n    if action.type then store.dispatch action\n\n  handle-mount = if select != pass then component-did-mount: !->\n    instance.component-will-unmount = store.subscribe ~>\n      handle-change! && instance.set-state empty\n  Object.assign instance, handle-mount,\n    get-child-context: -> context\n    component-will-receive-props: !->\n      handle-change it if select != pass\n      changed ||:= merge.length > 2 && flat-diff instance.props, it\n    should-component-update: -> changed\n    render: ->\n      changed := false\n      render merge selected, bind-action, instance.props\n\nfunction chain select, merge, render\n  display-name: name render\n  component-will-mount: !-> init @, select, merge, render\n  render: pass\n\nfunction link {Component, prop-types, create-class=class-factory Component}\n  types = if prop-types?any\n    context-types = store: that\n    {context-types, child-context-types: context-types}\n\n  (render, select=pass, merge=pass) ->\n    linking = chain select, merge, render\n    create-class Object.assign {} types, linking\n\nexport {default: link, link}\n","function handle-actions handlers, default-state={}\n  (state, {type, payload}) ->\n    if handlers[type]? state, payload then Object.assign {} state, that\n    else state || default-state\n\nexport default: handle-actions\n","import\n  \\./class-factory : class-factory\n  \\./flat-diff : flat-diff\n\nfunction render-empty => ''\nfunction has-changes next => flat-diff @props, next\n\nfunction side-effect Component\n  create-class = class-factory Component\n  (handle-change) ~>\n    instances = []\n    emit-change = !~> handle-change instances.map (.props)\n\n    create-class do\n      component-will-mount: !->\n        instances.push @\n        emit-change!\n      should-component-update: has-changes\n      component-did-update: emit-change\n      component-will-unmount: !->\n        instances.splice (instances.index-of @), 1\n        emit-change!\n      render: render-empty\n\nexport default: side-effect\n"],"names":[],"mappings":"AAAA,sBAAkB;;;;AAClB,iCAAiC;SAAG,gBAClC;;WAAgB,wBAAhB;kBACA,GAAe,aAAQ,CAAO,aAAQ,CAAS,mBAAT,CAAf,QAAmC;;KAAnC,CAAvB;WACM,aAAQ,OAAM;mBAAK;KAAX;;;;ACJhB,wBACE;;MAAkB,OAAL,EAAb;MACe,QAAS,aAAW,IAAG,QAAS,aAAnC,EAAZ;SACa,WAAM,GAAnB;MACmB,WAAQ,KAAS,WAAM,GAAE,OAAhC,EAAZ;SACI,SAAM;WAAI,KAAK,KAAI;GAAb;;;;ACDZ,QAAQ,EAAR;;AACA,kBAAc;SAAK,cAAc,IAAK,OAAM;;;AAC5C,kBAAc;;;;AAEd,uBACE;;cAAY,SAAZ;SACM,aAAQ,YACZ;eAAW,cACT;mBAAc;aACL,gBAAO,KAAM;KAFxB;YAGQ;aAAQ,UAAM,CAAS,cAAK,EAAd,CAAgB,IAAK;eAAK;OAAL;;GAJ/B;;;AAMhB,+CACE;;UAAgB,cAAM,MAAO,IAAW,gBAAQ,MAAhD;YACU;WAAO,OAAiB,eAAjB,GAAqC,aAArC;GAAjB;aACkB,OAAK,cAAU,EAAf,EAA0B,cAA1B,CAAlB;;;wBAGuB,QAAc,cAArC,EACE;;;eACmB,OAAK,cAAU,EAAf,QAAnB;WACa,2BAAoB,iBAAyB,WAAO;;;2CAEzB;WAAG,iBAC3C;;eAAsD,qCAA9B,2BAAmB,cAAnB,UAA8B,iBAAtD;aAC4B,QAAtB,uCAAO,CAAK,cAAL,UAAe,MACnB,WADmB,GACH,cAAU,QADP;;;;gBAGL,eAAzB,GAAsC;uBAAqB,YACzD;mCAAA,GAAuC,eAAW,OACnC,cAAE,IAAW,iBAAW,OADW,CAAlD;;GADF;eAGc,wBACZ;qBAAmB;;KAAnB;+BAC8B,cAC5B;UAA2B,eAAV,EAAH;kBACd,UAAkB,YAAQ,IAAI,IAAa,SAAQ,cAAR;KAH7C;2BAIyB;;KAJzB;YAKQ,YACN;;aACO,OAAM,4BAA+B,cAA/B,CAAN;;GARG;;;AAUhB,sCACE;SAAA;iBAAmB,YAAnB;wBACsB;;KADtB;;;;;AAIF,cAAc;WAAA;WAAA;gBAAmD;CAAjE,EACE;;sCAAsB,sBAAtB,KACE,eAAgB;;GADlB,EAEE;gBAAA;;GAFF;SAIA,kBAAS,aAAT,EAAsB,YAAtB,EACE;;cAAgB,4BAAhB;WACa,YAAM,aAAQ,oBAAd;;;;ACzDjB,iCAAkC,eAAc,EAAhD,EACE;SAAA,iBAAQ;QAAA;;GAAR,EACE;;0BAAW,6CAAQ,6BAA0B,aAAQ,oBAC1C;;;;ACCf,uBAAsB;;;;AACtB,0BAA0B;SAAa,SAAC,UAAD;;;AAEvC,+BACE;;gBAA6B,uBAA7B;SACA,gBACE;;gBAAY,EAAZ;;iBACc,MAAkB,aAAS,aAAK,CAAC,cAAD,CAAd,CAAhC;;WAGE;0BAAsB,YACpB;sBAAe;;OADjB;uCAAA;oCAAA;4BAKwB,YACtB;wBAAiB,CAAU,iBAAU,MAApB;;OANnB;;;;;;;;;"}